
// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Provides nail art design suggestions based on user preferences, including image generation.
 *
 * - suggestNailArtDesign - A function that suggests nail art designs.
 * - SuggestNailArtDesignInput - The input type for the suggestNailArtDesign function.
 * - SuggestNailArtDesignOutput - The return type for the suggestNailArtDesign function.
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';
// Import the Vertex AI client library
import { PredictionServiceClient, helpers } from '@google-cloud/aiplatform';

// Configuration for Vertex AI (replace with your actual project details)
const project = process.env.GOOGLE_CLOUD_PROJECT || 'your-gcp-project-id'; // Make sure this is set
const location = process.env.GOOGLE_CLOUD_LOCATION || 'us-central1'; // Or your preferred region
const publisher = 'google';
const model = 'imagegeneration@006'; // Example: Use a recent stable diffusion model available in Vertex AI

const SuggestNailArtDesignInputSchema = z.object({
  color: z.string().describe('The preferred color for the nail art design.'),
  style: z.string().describe('The preferred style for the nail art design (e.g., minimalist, floral, glitter).'),
  occasion: z.string().describe('The occasion for the nail art design (e.g., party, wedding, casual).'),
});
export type SuggestNailArtDesignInput = z.infer<typeof SuggestNailArtDesignInputSchema>;

const SuggestNailArtDesignOutputSchema = z.object({
  designSuggestion: z.string().describe('A detailed description of the suggested nail art design.'),
  imageUrl: z.string().describe('A URL or base64 data URI of the generated nail art image.'), // Can be URL or base64
});
export type SuggestNailArtDesignOutput = z.infer<typeof SuggestNailArtDesignOutputSchema>;

export async function suggestNailArtDesign(input: SuggestNailArtDesignInput): Promise<SuggestNailArtDesignOutput> {
  return suggestNailArtDesignFlow(input);
}

// Flow for getting the text description
const textPrompt = ai.definePrompt({
  name: 'suggestNailArtDesignTextPrompt',
  input: {
    schema: SuggestNailArtDesignInputSchema,
  },
  output: {
    schema: z.object({
      designSuggestion: z.string().describe('A detailed description of the suggested nail art design.'),
    }),
  },
  prompt: `Suggest a nail art design based on the following preferences:

Color: {{{color}}}
Style: {{{style}}}
Occasion: {{{occasion}}}

Provide ONLY a detailed description of the design suitable for an image generation prompt. Focus on visual details.
`,
});

// Function to generate image using Vertex AI
async function generateImageWithVertexAI(promptText: string): Promise<string> {
  const clientOptions = {
    apiEndpoint: `${location}-aiplatform.googleapis.com`,
  };
  const predictionServiceClient = new PredictionServiceClient(clientOptions);

  const endpoint = `projects/${project}/locations/${location}/publishers/${publisher}/models/${model}`;

  // Construct the request payload
  const instance = { prompt: promptText };
  const parameters = {
      // Example parameters (adjust as needed):
      sampleCount: 1, // Number of images to generate
      // You might need other parameters depending on the specific model
      // e.g., negativePrompt, seed, aspectRatio, etc.
  };
  const instanceValue = helpers.toValue(instance);
  const parametersValue = helpers.toValue(parameters);

  const request = {
    endpoint,
    instances: [instanceValue!],
    parameters: parametersValue,
  };

  try {
    const [response] = await predictionServiceClient.predict(request);

    // Extract the image data (assuming base64 encoded)
    const predictions = response.predictions;
    if (!predictions || predictions.length === 0) {
      throw new Error('No predictions returned from Vertex AI.');
    }
    const imageBytesBase64 = predictions[0]?.structValue?.fields?.bytesBase64Encoded?.stringValue;

    if (!imageBytesBase64) {
      throw new Error('Could not extract base64 image data from Vertex AI response.');
    }

    // Return as a base64 data URI
    return `data:image/png;base64,${imageBytesBase64}`;

  } catch (error) {
    console.error('Error generating image with Vertex AI:', error);
    // Return placeholder on error
    return '/images/default-nail-art.png'; // Make sure this placeholder exists in public/images
  }
}

// Combined flow definition
const suggestNailArtDesignFlow = ai.defineFlow<
  typeof SuggestNailArtDesignInputSchema,
  typeof SuggestNailArtDesignOutputSchema
>({
  name: 'suggestNailArtDesignFlow',
  inputSchema: SuggestNailArtDesignInputSchema,
  outputSchema: SuggestNailArtDesignOutputSchema,
}, async (input) => {
  // 1. Get the text description optimized for image generation
  const { output: textOutput } = await textPrompt(input);
  const designDescription = textOutput!.designSuggestion;

  // 2. Generate the image using Vertex AI
  const imageUrl = await generateImageWithVertexAI(designDescription);

  // 3. Return both the original (possibly more verbose) description and the image URL/data
  // We might want a separate prompt call if we need a user-facing description
  // vs. the image generation prompt. For now, using the same.
  return {
    designSuggestion: designDescription, // Or call a separate prompt for a friendlier description
    imageUrl: imageUrl,
  };
});

